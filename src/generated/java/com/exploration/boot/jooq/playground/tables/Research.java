/**
 * This class is generated by jOOQ
 */
package com.exploration.boot.jooq.playground.tables;


import com.exploration.boot.jooq.playground.Keys;
import com.exploration.boot.jooq.playground.Public;
import com.exploration.boot.jooq.playground.tables.records.ResearchRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Research extends TableImpl<ResearchRecord> {

    private static final long serialVersionUID = 169087974;

    /**
     * The reference instance of <code>PUBLIC.RESEARCH</code>
     */
    public static final Research RESEARCH = new Research();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResearchRecord> getRecordType() {
        return ResearchRecord.class;
    }

    /**
     * The column <code>PUBLIC.RESEARCH.ID</code>.
     */
    public final TableField<ResearchRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_545AA4F1_9783_40CB_9F85_EF67E55A2254)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.RESEARCH.SPACE_TRAVEL_ID</code>.
     */
    public final TableField<ResearchRecord, Long> SPACE_TRAVEL_ID = createField("SPACE_TRAVEL_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.RESEARCH.DESCRIPTION</code>.
     */
    public final TableField<ResearchRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.RESEARCH</code> table reference
     */
    public Research() {
        this("RESEARCH", null);
    }

    /**
     * Create an aliased <code>PUBLIC.RESEARCH</code> table reference
     */
    public Research(String alias) {
        this(alias, RESEARCH);
    }

    private Research(String alias, Table<ResearchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Research(String alias, Table<ResearchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ResearchRecord, Long> getIdentity() {
        return Keys.IDENTITY_RESEARCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ResearchRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ResearchRecord>> getKeys() {
        return Arrays.<UniqueKey<ResearchRecord>>asList(Keys.CONSTRAINT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ResearchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ResearchRecord, ?>>asList(Keys.CONSTRAINT_19);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Research as(String alias) {
        return new Research(alias, this);
    }

    /**
     * Rename this table
     */
    public Research rename(String name) {
        return new Research(name, null);
    }
}
